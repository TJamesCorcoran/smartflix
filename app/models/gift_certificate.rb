# This represents gift certificates that have been sold, in contrast
# with the ones that are yet to be sold (which are just called GiftCert)

class GiftCertificate < ActiveRecord::Base
  self.primary_key = "gift_certificate_id"
  attr_protected # <-- blank means total access


  has_one :account_credit_transaction

  def self.name_column_equiv() "code" end

  # Make sure code is autogenerated before save if it's blank
  before_save :autogenerate_code

  def validate
    # one or the other - not both (xor)
    errors.add(amount,"just one of amount and univ_months may be set") unless amount.to_bool ^ univ_months.to_bool
  end

  def autogenerate_code
    if self.code.blank?
      self.code = String.random_alphabetic(10).upcase
    end
  end

  def name
    (amount ? "#{amount.currency}" : "#{univ_months} month" ) + " gift certificate"
  end

  # Try to find the customer who used this gift certificate
  def used_by_customer
    self.account_credit_transaction.account_credit.customer
  rescue
    nil
  end

  def GiftCertificate.amounts
    GiftCert.find(:all, :conditions ).map(&:price).sort
  end

  def self.methods_equivalent_to_name()
    [:code]
  end 

  def self.extra_cols()
    [:used_by_customer]
  end 

end
