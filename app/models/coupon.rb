class Coupon < ActiveRecord::Base
  attr_protected # <-- blank means total access


  has_many :uses, :class_name => 'CouponUse', :foreign_key => 'coupon_id'

  # Make sure code is autogenerated before save if it's blank
  before_save :autogenerate_code

  # Validations

  validates_uniqueness_of :code
  validates_length_of :code, :minimum => 2, :if => lambda { |c| c.code.length != 0 }

  validates_numericality_of :amount

  def validate

    # If coupon is single use, the code must be autogenerated; if it's
    # not single use the code must be specified

    if (self.single_use_only && self.code.length != 0)
      errors.add_to_base("Single use coupons must use autogenerated code")
    end

    if (!self.single_use_only && self.code.length == 0)
      errors.add_to_base("Multiple use coupons must have a code specified")
    end

    # Make sure the code does not exist in the gift certificates table
    # Note: We could have used polymorphic association to make this part
    # easier, but it also leads to trickier code when generating codes
    # and a less transparent model

    if (GiftCertificate.find_by_code(self.code))
      errors.add_to_base("Gift Certificates and Coupons cannot have the same claim code")
    end

  end

  # Given a customer, return whether the customer used the coupon
  def used_by?(customer)
    # Custom query for speed
    Coupon.count_by_sql(["SELECT COUNT(1) FROM orders, price_modifiers
                           WHERE orders.customer_id = ?
                             AND orders.order_id = price_modifiers.order_id
                             AND price_modifiers.coupon_id = ? ",
                         customer.id,
                         self.id]) > 0
  end

  private

  # Generate the coupon code randomly
  def autogenerate_code
    self.code = String.random_alphanumeric     if self.code.length == 0
  end

end
